#验证函数
def verify_card_number(card_number):
    #表示奇数位之和
    sum_of_odd_digits = 0
    #反转过来求偶数位，在这里card_number是字符串
    card_number_reversed = card_number[::-1]
    odd_digits = card_number_reversed[::2]
    #在这里digit是字符类型需要强转
    for digit in odd_digits:
        sum_of_odd_digits += int(digit)
    
    sum_of_even_digits = 0
    even_digits = card_number_reversed[1::2]
    #偶数位需要×2，如果×2之后的结果大于10，需要把十位和个位相加
    for digit in even_digits:
        number = int(digit) * 2
        if number >= 10:
            number = (number // 10) + (number % 10)
        sum_of_even_digits += number
    #表示总和
    total = sum_of_odd_digits + sum_of_even_digits
    print(total)
    #返回校检位模10是否等于0
    return total % 10 == 0

#校检card_number
def main():
    card_number = '4111-1111-4555-1142'
    #maketrans将字符替换为别的，在这里将-和空格字符转化为空字符，在这里并没有转化而是打表
    card_translation = str.maketrans({'-': '', ' ': ''})
    #translated_card_number用来存储转化之后的number
    translated_card_number = card_number.translate(card_translation)

    #验证
    if verify_card_number(translated_card_number):
        #如果返回值是true，则valid
        print('VALID!')
    else:
        print('INVALID!')

main()
